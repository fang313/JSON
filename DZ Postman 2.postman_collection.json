{
	"info": {
		"_postman_id": "845ff556-359e-44aa-acfe-dfde6aa773b4",
		"name": "DZ Postman 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"let user_token = jsonData.token;\r",
							"pm.environment.set(\"token\",user_token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Oleg",
							"type": "default"
						},
						{
							"key": "password",
							"value": "keepitout123",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "162.55.220.72:5007/login",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5007",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "First Body check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body check\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"// Неправильный вариант\r",
							"// pm.test(\"Body check\", function () {\r",
							"//     pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"// });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5007/first",
					"host": [
						"{{url}}"
					],
					"port": "5007",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "User_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let resp_name = jsonData.name\r",
							"pm.test(\"Name check\", function () {\r",
							"    pm.expect(resp_name).to.eql(\"Alex\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let resp_age = jsonData.age\r",
							"pm.test(\"Age check\", function () {\r",
							"    pm.expect(resp_age).to.eql(\"31\");\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let resp_salary = jsonData.salary\r",
							"pm.test(\"Salary check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"pm.test(\"Name check2\", function () {\r",
							"    pm.expect(resp_name).to.deep.eql(req_name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"pm.test(\"Age check2\", function () {\r",
							"    pm.expect(resp_age).to.deep.eql(req_age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary\r",
							"let salary_number = Number(req_salary)\r",
							"pm.test(\"Salary check2\", function () {\r",
							"    pm.expect(resp_salary).to.deep.eql(salary_number);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_massive = jsonData.family.u_salary_1_5_year\r",
							"\r",
							"pm.test(\"Salary check3\", function () {\r",
							"    pm.expect(salary_massive).to.eql(req_salary*4);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "31",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Alex",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}:5005/user_info_3",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"Name check\", function () {\r",
							"    pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = Number(req.age)\r",
							"let resp_age = Number(jsonData.age)\r",
							"\r",
							"pm.test(\"Age check\", function () {\r",
							"    pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = req.salary\r",
							"let salary_number = Number(req_salary)\r",
							"let resp_salary = jsonData.salary\r",
							"\r",
							"pm.test(\"Salary check\", function () {\r",
							"    pm.expect(resp_salary).to.eql(salary_number);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"//console.log(jsonData.family.pets.dog)\r",
							"let dog_check = jsonData.family.pets.dog\r",
							"\r",
							"pm.test(\"Dog check name\", function () {\r",
							"    pm.expect(pm.expect(dog_check).to.have.property(\"name\"));\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Dog check age\", function () {\r",
							"    pm.expect(pm.expect(dog_check).to.have.property(\"age\"));\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"let dog_name = jsonData.family.pets.dog.name\r",
							"\r",
							"pm.test(\"Dog check Luky\", function () {\r",
							"    pm.expect(dog_name).to.deep.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"let dog_age = jsonData.family.pets.dog.age\r",
							"\r",
							"pm.test(\"Dog check Luky\", function () {\r",
							"    pm.expect(dog_age).to.deep.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_3?age=31&salary=2000&name=Alex",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "name",
							"value": "Alex"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject()\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"let resp_name = jsonData.name\r",
							"\r",
							"pm.test(\"Name check\", function () {\r",
							"    pm.expect(resp_name).to.deep.eql(req_name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = Number(req.age)\r",
							"let resp_age = jsonData.age\r",
							"\r",
							"pm.test(\"Age check\", function () {\r",
							"    pm.expect(resp_age).to.deep.eql(req_age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"let resp_salary = jsonData.salary\r",
							"console.log(resp_salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}:5005/object_info_4?age=31&salary=2000&name=Alex",
					"host": [
						"{{url}}"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "31"
						},
						{
							"key": "salary",
							"value": "2000"
						},
						{
							"key": "name",
							"value": "Alex"
						}
					]
				}
			},
			"response": []
		}
	]
}